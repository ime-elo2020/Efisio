
STM32F4_Discovery_MEMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001260  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080013e8  080013e8  000113e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080013ec  080013ec  000113ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000028  20000000  080013f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  6 .bss          000000b8  20000028  20000028  00020028  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200000e0  200000e0  00020028  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007d1d  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000014ea  00000000  00000000  00027d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a48  00000000  00000000  00029260  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000970  00000000  00000000  00029ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000036f5  00000000  00000000  0002a618  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000033e4  00000000  00000000  0002dd0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000310f1  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002b84  00000000  00000000  00031170  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080013d0 	.word	0x080013d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	080013d0 	.word	0x080013d0

080001c8 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <DAC_SetChannel1Data+0x34>)
 80001da:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	4413      	add	r3, r2
 80001e2:	3308      	adds	r3, #8
 80001e4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	461a      	mov	r2, r3
 80001ea:	887b      	ldrh	r3, [r7, #2]
 80001ec:	6013      	str	r3, [r2, #0]
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40007400 	.word	0x40007400

08000200 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000214:	68fa      	ldr	r2, [r7, #12]
 8000216:	4b25      	ldr	r3, [pc, #148]	; (80002ac <DMA_Init+0xac>)
 8000218:	4013      	ands	r3, r2
 800021a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800022a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000236:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000242:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000248:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800024e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000254:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	4313      	orrs	r3, r2
 800025a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	f023 0307 	bic.w	r3, r3, #7
 800026e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000278:	4313      	orrs	r3, r2
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	4313      	orrs	r3, r2
 800027e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	691a      	ldr	r2, [r3, #16]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	685a      	ldr	r2, [r3, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	689a      	ldr	r2, [r3, #8]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	60da      	str	r2, [r3, #12]
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	f01c803f 	.word	0xf01c803f

080002b0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d006      	beq.n	80002d0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 0201 	orr.w	r2, r3, #1
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80002ce:	e005      	b.n	80002dc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f023 0201 	bic.w	r2, r3, #1
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	601a      	str	r2, [r3, #0]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80002f0:	2300      	movs	r3, #0
 80002f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d002      	beq.n	8000306 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000300:	2301      	movs	r3, #1
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	e001      	b.n	800030a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000306:	2300      	movs	r3, #0
 8000308:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800030a:	7bfb      	ldrb	r3, [r7, #15]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000318:	b480      	push	{r7}
 800031a:	b087      	sub	sp, #28
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000322:	2300      	movs	r3, #0
 8000324:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a15      	ldr	r2, [pc, #84]	; (8000384 <DMA_GetFlagStatus+0x6c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d802      	bhi.n	8000338 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <DMA_GetFlagStatus+0x70>)
 8000334:	613b      	str	r3, [r7, #16]
 8000336:	e001      	b.n	800033c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000338:	4b14      	ldr	r3, [pc, #80]	; (800038c <DMA_GetFlagStatus+0x74>)
 800033a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000342:	2b00      	cmp	r3, #0
 8000344:	d003      	beq.n	800034e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000346:	693b      	ldr	r3, [r7, #16]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	e002      	b.n	8000354 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800035a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800035e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000360:	68fa      	ldr	r2, [r7, #12]
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	4013      	ands	r3, r2
 8000366:	2b00      	cmp	r3, #0
 8000368:	d002      	beq.n	8000370 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800036a:	2301      	movs	r3, #1
 800036c:	75fb      	strb	r3, [r7, #23]
 800036e:	e001      	b.n	8000374 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000374:	7dfb      	ldrb	r3, [r7, #23]
}
 8000376:	4618      	mov	r0, r3
 8000378:	371c      	adds	r7, #28
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	4002640f 	.word	0x4002640f
 8000388:	40026000 	.word	0x40026000
 800038c:	40026400 	.word	0x40026400

08000390 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a10      	ldr	r2, [pc, #64]	; (80003e0 <DMA_ClearFlag+0x50>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d802      	bhi.n	80003a8 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <DMA_ClearFlag+0x54>)
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	e001      	b.n	80003ac <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <DMA_ClearFlag+0x58>)
 80003aa:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d007      	beq.n	80003c6 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003bc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80003c4:	e006      	b.n	80003d4 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003cc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	6093      	str	r3, [r2, #8]
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	4002640f 	.word	0x4002640f
 80003e4:	40026000 	.word	0x40026000
 80003e8:	40026400 	.word	0x40026400

080003ec <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b087      	sub	sp, #28
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	e076      	b.n	80004f6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000408:	2201      	movs	r2, #1
 800040a:	697b      	ldr	r3, [r7, #20]
 800040c:	fa02 f303 	lsl.w	r3, r2, r3
 8000410:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	693b      	ldr	r3, [r7, #16]
 8000418:	4013      	ands	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800041c:	68fa      	ldr	r2, [r7, #12]
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	429a      	cmp	r2, r3
 8000422:	d165      	bne.n	80004f0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	2103      	movs	r1, #3
 800042e:	fa01 f303 	lsl.w	r3, r1, r3
 8000432:	43db      	mvns	r3, r3
 8000434:	401a      	ands	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	4619      	mov	r1, r3
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	fa01 f303 	lsl.w	r3, r1, r3
 800044c:	431a      	orrs	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	791b      	ldrb	r3, [r3, #4]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d003      	beq.n	8000462 <GPIO_Init+0x76>
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	2b02      	cmp	r3, #2
 8000460:	d12e      	bne.n	80004c0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	689a      	ldr	r2, [r3, #8]
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	2103      	movs	r1, #3
 800046c:	fa01 f303 	lsl.w	r3, r1, r3
 8000470:	43db      	mvns	r3, r3
 8000472:	401a      	ands	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	689a      	ldr	r2, [r3, #8]
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	795b      	ldrb	r3, [r3, #5]
 8000480:	4619      	mov	r1, r3
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	fa01 f303 	lsl.w	r3, r1, r3
 800048a:	431a      	orrs	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	685a      	ldr	r2, [r3, #4]
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	b29b      	uxth	r3, r3
 8000498:	4619      	mov	r1, r3
 800049a:	2301      	movs	r3, #1
 800049c:	408b      	lsls	r3, r1
 800049e:	43db      	mvns	r3, r3
 80004a0:	401a      	ands	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	683a      	ldr	r2, [r7, #0]
 80004ac:	7992      	ldrb	r2, [r2, #6]
 80004ae:	4611      	mov	r1, r2
 80004b0:	697a      	ldr	r2, [r7, #20]
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fa01 f202 	lsl.w	r2, r1, r2
 80004b8:	b292      	uxth	r2, r2
 80004ba:	431a      	orrs	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	68da      	ldr	r2, [r3, #12]
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	2103      	movs	r1, #3
 80004cc:	fa01 f303 	lsl.w	r3, r1, r3
 80004d0:	43db      	mvns	r3, r3
 80004d2:	401a      	ands	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	68da      	ldr	r2, [r3, #12]
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	79db      	ldrb	r3, [r3, #7]
 80004e0:	4619      	mov	r1, r3
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	431a      	orrs	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	3301      	adds	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	2b0f      	cmp	r3, #15
 80004fa:	d985      	bls.n	8000408 <GPIO_Init+0x1c>
    }
  }
}
 80004fc:	bf00      	nop
 80004fe:	371c      	adds	r7, #28
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	887a      	ldrh	r2, [r7, #2]
 8000518:	831a      	strh	r2, [r3, #24]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000526:	b480      	push	{r7}
 8000528:	b083      	sub	sp, #12
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	460b      	mov	r3, r1
 8000530:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	887a      	ldrh	r2, [r7, #2]
 8000536:	835a      	strh	r2, [r3, #26]
}
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	807b      	strh	r3, [r7, #2]
 8000550:	4613      	mov	r3, r2
 8000552:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800055c:	787a      	ldrb	r2, [r7, #1]
 800055e:	887b      	ldrh	r3, [r7, #2]
 8000560:	f003 0307 	and.w	r3, r3, #7
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	fa02 f303 	lsl.w	r3, r2, r3
 800056a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800056c:	887b      	ldrh	r3, [r7, #2]
 800056e:	08db      	lsrs	r3, r3, #3
 8000570:	b29b      	uxth	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	887b      	ldrh	r3, [r7, #2]
 8000576:	08db      	lsrs	r3, r3, #3
 8000578:	b29b      	uxth	r3, r3
 800057a:	461a      	mov	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3208      	adds	r2, #8
 8000580:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000584:	887b      	ldrh	r3, [r7, #2]
 8000586:	f003 0307 	and.w	r3, r3, #7
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	210f      	movs	r1, #15
 800058e:	fa01 f303 	lsl.w	r3, r1, r3
 8000592:	43db      	mvns	r3, r3
 8000594:	ea02 0103 	and.w	r1, r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f100 0208 	add.w	r2, r0, #8
 800059e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80005a2:	887b      	ldrh	r3, [r7, #2]
 80005a4:	08db      	lsrs	r3, r3, #3
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	461a      	mov	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3208      	adds	r2, #8
 80005ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80005b8:	887b      	ldrh	r3, [r7, #2]
 80005ba:	08db      	lsrs	r3, r3, #3
 80005bc:	b29b      	uxth	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3208      	adds	r2, #8
 80005c4:	68b9      	ldr	r1, [r7, #8]
 80005c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
	...

080005d8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005e4:	78fb      	ldrb	r3, [r7, #3]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d006      	beq.n	80005f8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80005ea:	490a      	ldr	r1, [pc, #40]	; (8000614 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80005f6:	e006      	b.n	8000606 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80005f8:	4906      	ldr	r1, [pc, #24]	; (8000614 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	43db      	mvns	r3, r3
 8000602:	4013      	ands	r3, r2
 8000604:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800

08000618 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000624:	78fb      	ldrb	r3, [r7, #3]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800062a:	490a      	ldr	r1, [pc, #40]	; (8000654 <RCC_APB2PeriphClockCmd+0x3c>)
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <RCC_APB2PeriphClockCmd+0x3c>)
 800062e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4313      	orrs	r3, r2
 8000634:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000636:	e006      	b.n	8000646 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000638:	4906      	ldr	r1, [pc, #24]	; (8000654 <RCC_APB2PeriphClockCmd+0x3c>)
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <RCC_APB2PeriphClockCmd+0x3c>)
 800063c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	43db      	mvns	r3, r3
 8000642:	4013      	ands	r3, r2
 8000644:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800

08000658 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d006      	beq.n	8000678 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800066a:	490a      	ldr	r1, [pc, #40]	; (8000694 <RCC_APB1PeriphResetCmd+0x3c>)
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <RCC_APB1PeriphResetCmd+0x3c>)
 800066e:	6a1a      	ldr	r2, [r3, #32]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4313      	orrs	r3, r2
 8000674:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8000676:	e006      	b.n	8000686 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000678:	4906      	ldr	r1, [pc, #24]	; (8000694 <RCC_APB1PeriphResetCmd+0x3c>)
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <RCC_APB1PeriphResetCmd+0x3c>)
 800067c:	6a1a      	ldr	r2, [r3, #32]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	43db      	mvns	r3, r3
 8000682:	4013      	ands	r3, r2
 8000684:	620b      	str	r3, [r1, #32]
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800

08000698 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d006      	beq.n	80006b8 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80006aa:	490a      	ldr	r1, [pc, #40]	; (80006d4 <RCC_APB2PeriphResetCmd+0x3c>)
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <RCC_APB2PeriphResetCmd+0x3c>)
 80006ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 80006b6:	e006      	b.n	80006c6 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80006b8:	4906      	ldr	r1, [pc, #24]	; (80006d4 <RCC_APB2PeriphResetCmd+0x3c>)
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <RCC_APB2PeriphResetCmd+0x3c>)
 80006bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	43db      	mvns	r3, r3
 80006c2:	4013      	ands	r3, r2
 80006c4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800

080006d8 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a17      	ldr	r2, [pc, #92]	; (8000740 <SPI_I2S_DeInit+0x68>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d10a      	bne.n	80006fe <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80006e8:	2101      	movs	r1, #1
 80006ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006ee:	f7ff ffd3 	bl	8000698 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80006f2:	2100      	movs	r1, #0
 80006f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006f8:	f7ff ffce 	bl	8000698 <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 80006fc:	e01c      	b.n	8000738 <SPI_I2S_DeInit+0x60>
  else if (SPIx == SPI2)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a10      	ldr	r2, [pc, #64]	; (8000744 <SPI_I2S_DeInit+0x6c>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d10a      	bne.n	800071c <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8000706:	2101      	movs	r1, #1
 8000708:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800070c:	f7ff ffa4 	bl	8000658 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8000710:	2100      	movs	r1, #0
 8000712:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000716:	f7ff ff9f 	bl	8000658 <RCC_APB1PeriphResetCmd>
}
 800071a:	e00d      	b.n	8000738 <SPI_I2S_DeInit+0x60>
    if (SPIx == SPI3)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <SPI_I2S_DeInit+0x70>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d109      	bne.n	8000738 <SPI_I2S_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8000724:	2101      	movs	r1, #1
 8000726:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800072a:	f7ff ff95 	bl	8000658 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800072e:	2100      	movs	r1, #0
 8000730:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000734:	f7ff ff90 	bl	8000658 <RCC_APB1PeriphResetCmd>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40013000 	.word	0x40013000
 8000744:	40003800 	.word	0x40003800
 8000748:	40003c00 	.word	0x40003c00

0800074c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000760:	89fb      	ldrh	r3, [r7, #14]
 8000762:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000766:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	881a      	ldrh	r2, [r3, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	885b      	ldrh	r3, [r3, #2]
 8000770:	4313      	orrs	r3, r2
 8000772:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000778:	4313      	orrs	r3, r2
 800077a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000780:	4313      	orrs	r3, r2
 8000782:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000788:	4313      	orrs	r3, r2
 800078a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000790:	4313      	orrs	r3, r2
 8000792:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000798:	4313      	orrs	r3, r2
 800079a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007a0:	4313      	orrs	r3, r2
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	89fb      	ldrh	r3, [r7, #14]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	89fa      	ldrh	r2, [r7, #14]
 80007ae:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	8b9b      	ldrh	r3, [r3, #28]
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	8a1a      	ldrh	r2, [r3, #16]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	821a      	strh	r2, [r3, #16]
}
 80007c8:	bf00      	nop
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007e0:	78fb      	ldrb	r3, [r7, #3]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d008      	beq.n	80007f8 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 80007f6:	e007      	b.n	8000808 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000802:	b29a      	uxth	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	801a      	strh	r2, [r3, #0]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	899b      	ldrh	r3, [r3, #12]
 8000820:	b29b      	uxth	r3, r3
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
 8000836:	460b      	mov	r3, r1
 8000838:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	887a      	ldrh	r2, [r7, #2]
 800083e:	819a      	strh	r2, [r3, #12]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	891b      	ldrh	r3, [r3, #8]
 8000860:	b29a      	uxth	r2, r3
 8000862:	887b      	ldrh	r3, [r7, #2]
 8000864:	4013      	ands	r3, r2
 8000866:	b29b      	uxth	r3, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	d002      	beq.n	8000872 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800086c:	2301      	movs	r3, #1
 800086e:	73fb      	strb	r3, [r7, #15]
 8000870:	e001      	b.n	8000876 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000872:	2300      	movs	r3, #0
 8000874:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000876:	7bfb      	ldrb	r3, [r7, #15]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	683a      	ldr	r2, [r7, #0]
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	683a      	ldr	r2, [r7, #0]
 80008ae:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	683a      	ldr	r2, [r7, #0]
 80008ca:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	683a      	ldr	r2, [r7, #0]
 8000902:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	807b      	strh	r3, [r7, #2]
 800091c:	4613      	mov	r3, r2
 800091e:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8000924:	887b      	ldrh	r3, [r7, #2]
 8000926:	2201      	movs	r2, #1
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	8c1b      	ldrh	r3, [r3, #32]
 8000932:	b29a      	uxth	r2, r3
 8000934:	89fb      	ldrh	r3, [r7, #14]
 8000936:	43db      	mvns	r3, r3
 8000938:	b29b      	uxth	r3, r3
 800093a:	4013      	ands	r3, r2
 800093c:	b29a      	uxth	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	8c1b      	ldrh	r3, [r3, #32]
 8000946:	b29a      	uxth	r2, r3
 8000948:	8839      	ldrh	r1, [r7, #0]
 800094a:	887b      	ldrh	r3, [r7, #2]
 800094c:	fa01 f303 	lsl.w	r3, r1, r3
 8000950:	b29b      	uxth	r3, r3
 8000952:	4313      	orrs	r3, r2
 8000954:	b29a      	uxth	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	841a      	strh	r2, [r3, #32]
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
	...

08000968 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <STM_EVAL_LEDInit+0x50>)
 8000976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097a:	2101      	movs	r1, #1
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fe2b 	bl	80005d8 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <STM_EVAL_LEDInit+0x54>)
 8000986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800098a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800098c:	2301      	movs	r3, #1
 800098e:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000990:	2300      	movs	r3, #0
 8000992:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000994:	2301      	movs	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000998:	2302      	movs	r3, #2
 800099a:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <STM_EVAL_LEDInit+0x58>)
 80009a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a4:	f107 0208 	add.w	r2, r7, #8
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fd1e 	bl	80003ec <GPIO_Init>
}
 80009b0:	bf00      	nop
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	080013c0 	.word	0x080013c0
 80009bc:	080013b8 	.word	0x080013b8
 80009c0:	20000000 	.word	0x20000000

080009c4 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80009c8:	4b38      	ldr	r3, [pc, #224]	; (8000aac <Audio_MAL_IRQHandler+0xe8>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b38      	ldr	r3, [pc, #224]	; (8000ab0 <Audio_MAL_IRQHandler+0xec>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	4610      	mov	r0, r2
 80009d4:	f7ff fca0 	bl	8000318 <DMA_GetFlagStatus>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d064      	beq.n	8000aa8 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80009de:	4b35      	ldr	r3, [pc, #212]	; (8000ab4 <Audio_MAL_IRQHandler+0xf0>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d04c      	beq.n	8000a80 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80009e6:	bf00      	nop
 80009e8:	4b30      	ldr	r3, [pc, #192]	; (8000aac <Audio_MAL_IRQHandler+0xe8>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fc7b 	bl	80002e8 <DMA_GetCmdStatus>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1f7      	bne.n	80009e8 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80009f8:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <Audio_MAL_IRQHandler+0xe8>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <Audio_MAL_IRQHandler+0xec>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	4610      	mov	r0, r2
 8000a04:	f7ff fcc4 	bl	8000390 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000a08:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <Audio_MAL_IRQHandler+0xf4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <Audio_MAL_IRQHandler+0xf8>)
 8000a10:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <Audio_MAL_IRQHandler+0xf0>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	bf28      	it	cs
 8000a1e:	4613      	movcs	r3, r2
 8000a20:	4a26      	ldr	r2, [pc, #152]	; (8000abc <Audio_MAL_IRQHandler+0xf8>)
 8000a22:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000a24:	4b21      	ldr	r3, [pc, #132]	; (8000aac <Audio_MAL_IRQHandler+0xe8>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4924      	ldr	r1, [pc, #144]	; (8000abc <Audio_MAL_IRQHandler+0xf8>)
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fbe8 	bl	8000200 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <Audio_MAL_IRQHandler+0xe8>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2101      	movs	r1, #1
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fc3a 	bl	80002b0 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <Audio_MAL_IRQHandler+0xf4>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <Audio_MAL_IRQHandler+0xf0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a48:	d203      	bcs.n	8000a52 <Audio_MAL_IRQHandler+0x8e>
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <Audio_MAL_IRQHandler+0xf0>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	e000      	b.n	8000a54 <Audio_MAL_IRQHandler+0x90>
 8000a52:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <Audio_MAL_IRQHandler+0xfc>)
 8000a54:	4413      	add	r3, r2
 8000a56:	4a18      	ldr	r2, [pc, #96]	; (8000ab8 <Audio_MAL_IRQHandler+0xf4>)
 8000a58:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <Audio_MAL_IRQHandler+0xf0>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <Audio_MAL_IRQHandler+0xf0>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a66:	428b      	cmp	r3, r1
 8000a68:	bf28      	it	cs
 8000a6a:	460b      	movcs	r3, r1
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <Audio_MAL_IRQHandler+0xf0>)
 8000a70:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <Audio_MAL_IRQHandler+0xe8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2101      	movs	r1, #1
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fc19 	bl	80002b0 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000a7e:	e013      	b.n	8000aa8 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <Audio_MAL_IRQHandler+0xe8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fc12 	bl	80002b0 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <Audio_MAL_IRQHandler+0xe8>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <Audio_MAL_IRQHandler+0xec>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4619      	mov	r1, r3
 8000a96:	4610      	mov	r0, r2
 8000a98:	f7ff fc7a 	bl	8000390 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <Audio_MAL_IRQHandler+0xf4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f9ae 	bl	8000e04 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000018 	.word	0x20000018
 8000ab0:	2000001c 	.word	0x2000001c
 8000ab4:	20000010 	.word	0x20000010
 8000ab8:	2000004c 	.word	0x2000004c
 8000abc:	2000008c 	.word	0x2000008c
 8000ac0:	0001fffe 	.word	0x0001fffe

08000ac4 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000ac8:	f7ff ff7c 	bl	80009c4 <Audio_MAL_IRQHandler>
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000ad4:	f7ff ff76 	bl	80009c4 <Audio_MAL_IRQHandler>
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <SPI3_IRQHandler+0x3c>)
 8000ae4:	f7ff feb2 	bl	800084c <SPI_I2S_GetFlagStatus>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d011      	beq.n	8000b12 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <SPI3_IRQHandler+0x40>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d106      	bne.n	8000b04 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000af6:	f000 f990 	bl	8000e1a <EVAL_AUDIO_GetSampleCallBack>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4619      	mov	r1, r3
 8000afe:	2004      	movs	r0, #4
 8000b00:	f7ff fb62 	bl	80001c8 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000b04:	f000 f989 	bl	8000e1a <EVAL_AUDIO_GetSampleCallBack>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <SPI3_IRQHandler+0x3c>)
 8000b0e:	f7ff fe8e 	bl	800082e <SPI_I2S_SendData>
  }
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40003c00 	.word	0x40003c00
 8000b1c:	20000014 	.word	0x20000014

08000b20 <LIS302DL_Init>:
  * @param  LIS302DL_Config_Struct: pointer to a LIS302DL_Config_TypeDef structure 
  *         that contains the configuration setting for the LIS302DL.
  * @retval None
  */
void LIS302DL_Init(LIS302DL_InitTypeDef *LIS302DL_InitStruct)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
 8000b2c:	f000 f886 	bl	8000c3c <LIS302DL_LowLevel_Init>
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	785a      	ldrb	r2, [r3, #1]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	78db      	ldrb	r3, [r3, #3]
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 8000b40:	4313      	orrs	r3, r2
 8000b42:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	791b      	ldrb	r3, [r3, #4]
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Axes_Enable);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 8000b50:	4313      	orrs	r3, r2
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG1 regsister */
  LIS302DL_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 8000b56:	f107 030f 	add.w	r3, r7, #15
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f804 	bl	8000b6c <LIS302DL_Write>
}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <LIS302DL_Write>:
  * @param  WriteAddr : LIS302DL's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void LIS302DL_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	70fb      	strb	r3, [r7, #3]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8000b7c:	883b      	ldrh	r3, [r7, #0]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d903      	bls.n	8000b8a <LIS302DL_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8000b82:	78fb      	ldrb	r3, [r7, #3]
 8000b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b88:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  LIS302DL_CS_LOW();
 8000b8a:	2108      	movs	r1, #8
 8000b8c:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <LIS302DL_Write+0x5c>)
 8000b8e:	f7ff fcca 	bl	8000526 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(WriteAddr);
 8000b92:	78fb      	ldrb	r3, [r7, #3]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 f8ed 	bl	8000d74 <LIS302DL_SendByte>
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8000b9a:	e00a      	b.n	8000bb2 <LIS302DL_Write+0x46>
  {
    LIS302DL_SendByte(*pBuffer);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 f8e7 	bl	8000d74 <LIS302DL_SendByte>
    NumByteToWrite--;
 8000ba6:	883b      	ldrh	r3, [r7, #0]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8000bb2:	883b      	ldrh	r3, [r7, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1f1      	bne.n	8000b9c <LIS302DL_Write+0x30>
  }
  
  /* Set chip select High at the end of the transmission */ 
  LIS302DL_CS_HIGH();
 8000bb8:	2108      	movs	r1, #8
 8000bba:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <LIS302DL_Write+0x5c>)
 8000bbc:	f7ff fca4 	bl	8000508 <GPIO_SetBits>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40021000 	.word	0x40021000

08000bcc <LIS302DL_Read>:
  * @param  ReadAddr : LIS302DL's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the LIS302DL.
  * @retval None
  */
void LIS302DL_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	70fb      	strb	r3, [r7, #3]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8000bdc:	883b      	ldrh	r3, [r7, #0]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d904      	bls.n	8000bec <LIS302DL_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8000be2:	78fb      	ldrb	r3, [r7, #3]
 8000be4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000be8:	70fb      	strb	r3, [r7, #3]
 8000bea:	e003      	b.n	8000bf4 <LIS302DL_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8000bec:	78fb      	ldrb	r3, [r7, #3]
 8000bee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bf2:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  LIS302DL_CS_LOW();
 8000bf4:	2108      	movs	r1, #8
 8000bf6:	4810      	ldr	r0, [pc, #64]	; (8000c38 <LIS302DL_Read+0x6c>)
 8000bf8:	f7ff fc95 	bl	8000526 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(ReadAddr);
 8000bfc:	78fb      	ldrb	r3, [r7, #3]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f8b8 	bl	8000d74 <LIS302DL_SendByte>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8000c04:	e00c      	b.n	8000c20 <LIS302DL_Read+0x54>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to LIS302DL (Slave device) */
    *pBuffer = LIS302DL_SendByte(DUMMY_BYTE);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 f8b4 	bl	8000d74 <LIS302DL_SendByte>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8000c14:	883b      	ldrh	r3, [r7, #0]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8000c20:	883b      	ldrh	r3, [r7, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1ef      	bne.n	8000c06 <LIS302DL_Read+0x3a>
  }
  
  /* Set chip select High at the end of the transmission */ 
  LIS302DL_CS_HIGH();
 8000c26:	2108      	movs	r1, #8
 8000c28:	4803      	ldr	r0, [pc, #12]	; (8000c38 <LIS302DL_Read+0x6c>)
 8000c2a:	f7ff fc6d 	bl	8000508 <GPIO_SetBits>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000

08000c3c <LIS302DL_LowLevel_Init>:
  * @brief  Initializes the low level interface used to drive the LIS302DL
  * @param  None
  * @retval None
  */
static void LIS302DL_LowLevel_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  SPI_InitTypeDef  SPI_InitStructure;

  /* Enable the SPI periph */
  RCC_APB2PeriphClockCmd(LIS302DL_SPI_CLK, ENABLE);
 8000c42:	2101      	movs	r1, #1
 8000c44:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c48:	f7ff fce6 	bl	8000618 <RCC_APB2PeriphClockCmd>

  /* Enable SCK, MOSI and MISO GPIO clocks */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_SCK_GPIO_CLK | LIS302DL_SPI_MISO_GPIO_CLK | LIS302DL_SPI_MOSI_GPIO_CLK, ENABLE);
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f7ff fcc2 	bl	80005d8 <RCC_AHB1PeriphClockCmd>

  /* Enable CS  GPIO clock */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_CS_GPIO_CLK, ENABLE);
 8000c54:	2101      	movs	r1, #1
 8000c56:	2010      	movs	r0, #16
 8000c58:	f7ff fcbe 	bl	80005d8 <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT1 GPIO clock */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_INT1_GPIO_CLK, ENABLE);
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	2010      	movs	r0, #16
 8000c60:	f7ff fcba 	bl	80005d8 <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT2 GPIO clock */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_INT2_GPIO_CLK, ENABLE);
 8000c64:	2101      	movs	r1, #1
 8000c66:	2010      	movs	r0, #16
 8000c68:	f7ff fcb6 	bl	80005d8 <RCC_AHB1PeriphClockCmd>

  GPIO_PinAFConfig(LIS302DL_SPI_SCK_GPIO_PORT, LIS302DL_SPI_SCK_SOURCE, LIS302DL_SPI_SCK_AF);
 8000c6c:	2205      	movs	r2, #5
 8000c6e:	2105      	movs	r1, #5
 8000c70:	483d      	ldr	r0, [pc, #244]	; (8000d68 <LIS302DL_LowLevel_Init+0x12c>)
 8000c72:	f7ff fc67 	bl	8000544 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(LIS302DL_SPI_MISO_GPIO_PORT, LIS302DL_SPI_MISO_SOURCE, LIS302DL_SPI_MISO_AF);
 8000c76:	2205      	movs	r2, #5
 8000c78:	2106      	movs	r1, #6
 8000c7a:	483b      	ldr	r0, [pc, #236]	; (8000d68 <LIS302DL_LowLevel_Init+0x12c>)
 8000c7c:	f7ff fc62 	bl	8000544 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(LIS302DL_SPI_MOSI_GPIO_PORT, LIS302DL_SPI_MOSI_SOURCE, LIS302DL_SPI_MOSI_AF);
 8000c80:	2205      	movs	r2, #5
 8000c82:	2107      	movs	r1, #7
 8000c84:	4838      	ldr	r0, [pc, #224]	; (8000d68 <LIS302DL_LowLevel_Init+0x12c>)
 8000c86:	f7ff fc5d 	bl	8000544 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 8000c92:	2302      	movs	r3, #2
 8000c94:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000c96:	2302      	movs	r3, #2
 8000c98:	777b      	strb	r3, [r7, #29]

  /* SPI SCK pin configuration */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_SCK_PIN;
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8000c9e:	f107 0318 	add.w	r3, r7, #24
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4830      	ldr	r0, [pc, #192]	; (8000d68 <LIS302DL_LowLevel_Init+0x12c>)
 8000ca6:	f7ff fba1 	bl	80003ec <GPIO_Init>

  /* SPI  MOSI pin configuration */
  GPIO_InitStructure.GPIO_Pin =  LIS302DL_SPI_MOSI_PIN;
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	482c      	ldr	r0, [pc, #176]	; (8000d68 <LIS302DL_LowLevel_Init+0x12c>)
 8000cb6:	f7ff fb99 	bl	80003ec <GPIO_Init>

  /* SPI MISO pin configuration */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_MISO_PIN;
 8000cba:	2340      	movs	r3, #64	; 0x40
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8000cbe:	f107 0318 	add.w	r3, r7, #24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4828      	ldr	r0, [pc, #160]	; (8000d68 <LIS302DL_LowLevel_Init+0x12c>)
 8000cc6:	f7ff fb91 	bl	80003ec <GPIO_Init>

  /* SPI configuration -------------------------------------------------------*/
  SPI_I2S_DeInit(LIS302DL_SPI);
 8000cca:	4828      	ldr	r0, [pc, #160]	; (8000d6c <LIS302DL_LowLevel_Init+0x130>)
 8000ccc:	f7ff fd04 	bl	80006d8 <SPI_I2S_DeInit>
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	80bb      	strh	r3, [r7, #4]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	813b      	strh	r3, [r7, #8]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	817b      	strh	r3, [r7, #10]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8000ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce4:	81fb      	strh	r3, [r7, #14]
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 8000ce6:	2308      	movs	r3, #8
 8000ce8:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8000cea:	2300      	movs	r3, #0
 8000cec:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8000cee:	2307      	movs	r3, #7
 8000cf0:	82bb      	strh	r3, [r7, #20]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8000cf2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000cf6:	80fb      	strh	r3, [r7, #6]
  SPI_Init(LIS302DL_SPI, &SPI_InitStructure);
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	481b      	ldr	r0, [pc, #108]	; (8000d6c <LIS302DL_LowLevel_Init+0x130>)
 8000cfe:	f7ff fd25 	bl	800074c <SPI_Init>

  /* Enable SPI1  */
  SPI_Cmd(LIS302DL_SPI, ENABLE);
 8000d02:	2101      	movs	r1, #1
 8000d04:	4819      	ldr	r0, [pc, #100]	; (8000d6c <LIS302DL_LowLevel_Init+0x130>)
 8000d06:	f7ff fd65 	bl	80007d4 <SPI_Cmd>

  /* Configure GPIO PIN for Lis Chip select */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_CS_PIN;
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000d12:	2300      	movs	r3, #0
 8000d14:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000d16:	2302      	movs	r3, #2
 8000d18:	777b      	strb	r3, [r7, #29]
  GPIO_Init(LIS302DL_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
 8000d1a:	f107 0318 	add.w	r3, r7, #24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4813      	ldr	r0, [pc, #76]	; (8000d70 <LIS302DL_LowLevel_Init+0x134>)
 8000d22:	f7ff fb63 	bl	80003ec <GPIO_Init>

  /* Deselect : Chip Select high */
  GPIO_SetBits(LIS302DL_SPI_CS_GPIO_PORT, LIS302DL_SPI_CS_PIN);
 8000d26:	2108      	movs	r1, #8
 8000d28:	4811      	ldr	r0, [pc, #68]	; (8000d70 <LIS302DL_LowLevel_Init+0x134>)
 8000d2a:	f7ff fbed 	bl	8000508 <GPIO_SetBits>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_INT1_PIN;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000d32:	2300      	movs	r3, #0
 8000d34:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000d36:	2300      	movs	r3, #0
 8000d38:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	777b      	strb	r3, [r7, #29]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(LIS302DL_SPI_INT1_GPIO_PORT, &GPIO_InitStructure);
 8000d42:	f107 0318 	add.w	r3, r7, #24
 8000d46:	4619      	mov	r1, r3
 8000d48:	4809      	ldr	r0, [pc, #36]	; (8000d70 <LIS302DL_LowLevel_Init+0x134>)
 8000d4a:	f7ff fb4f 	bl	80003ec <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_INT2_PIN;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
 8000d52:	f107 0318 	add.w	r3, r7, #24
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <LIS302DL_LowLevel_Init+0x134>)
 8000d5a:	f7ff fb47 	bl	80003ec <GPIO_Init>
}
 8000d5e:	bf00      	nop
 8000d60:	3720      	adds	r7, #32
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	40013000 	.word	0x40013000
 8000d70:	40021000 	.word	0x40021000

08000d74 <LIS302DL_SendByte>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t LIS302DL_SendByte(uint8_t byte)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  /* Loop while DR register in not emplty */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <LIS302DL_SendByte+0x88>)
 8000d80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d84:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_TXE) == RESET)
 8000d86:	e00b      	b.n	8000da0 <LIS302DL_SendByte+0x2c>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <LIS302DL_SendByte+0x88>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	491b      	ldr	r1, [pc, #108]	; (8000dfc <LIS302DL_SendByte+0x88>)
 8000d90:	600a      	str	r2, [r1, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d104      	bne.n	8000da0 <LIS302DL_SendByte+0x2c>
 8000d96:	f000 f8ff 	bl	8000f98 <LIS302DL_TIMEOUT_UserCallback>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	e029      	b.n	8000df4 <LIS302DL_SendByte+0x80>
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_TXE) == RESET)
 8000da0:	2102      	movs	r1, #2
 8000da2:	4817      	ldr	r0, [pc, #92]	; (8000e00 <LIS302DL_SendByte+0x8c>)
 8000da4:	f7ff fd52 	bl	800084c <SPI_I2S_GetFlagStatus>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0ec      	beq.n	8000d88 <LIS302DL_SendByte+0x14>
  }
  
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(LIS302DL_SPI, byte);
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	4619      	mov	r1, r3
 8000db4:	4812      	ldr	r0, [pc, #72]	; (8000e00 <LIS302DL_SendByte+0x8c>)
 8000db6:	f7ff fd3a 	bl	800082e <SPI_I2S_SendData>
  
  /* Wait to receive a Byte */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <LIS302DL_SendByte+0x88>)
 8000dbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dc0:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 8000dc2:	e00b      	b.n	8000ddc <LIS302DL_SendByte+0x68>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <LIS302DL_SendByte+0x88>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	1e5a      	subs	r2, r3, #1
 8000dca:	490c      	ldr	r1, [pc, #48]	; (8000dfc <LIS302DL_SendByte+0x88>)
 8000dcc:	600a      	str	r2, [r1, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d104      	bne.n	8000ddc <LIS302DL_SendByte+0x68>
 8000dd2:	f000 f8e1 	bl	8000f98 <LIS302DL_TIMEOUT_UserCallback>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	e00b      	b.n	8000df4 <LIS302DL_SendByte+0x80>
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4808      	ldr	r0, [pc, #32]	; (8000e00 <LIS302DL_SendByte+0x8c>)
 8000de0:	f7ff fd34 	bl	800084c <SPI_I2S_GetFlagStatus>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0ec      	beq.n	8000dc4 <LIS302DL_SendByte+0x50>
  }
  
  /* Return the Byte read from the SPI bus */
  return (uint8_t)SPI_I2S_ReceiveData(LIS302DL_SPI);
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <LIS302DL_SendByte+0x8c>)
 8000dec:	f7ff fd12 	bl	8000814 <SPI_I2S_ReceiveData>
 8000df0:	4603      	mov	r3, r0
 8000df2:	b2db      	uxtb	r3, r3
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000020 	.word	0x20000020
 8000e00:	40013000 	.word	0x40013000

08000e04 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8000e0e:	bf00      	nop
}
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return;
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	da0b      	bge.n	8000e58 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000e40:	490d      	ldr	r1, [pc, #52]	; (8000e78 <NVIC_SetPriority+0x4c>)
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	3b04      	subs	r3, #4
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	0112      	lsls	r2, r2, #4
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	440b      	add	r3, r1
 8000e54:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000e56:	e009      	b.n	8000e6c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000e58:	4908      	ldr	r1, [pc, #32]	; (8000e7c <NVIC_SetPriority+0x50>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e8e:	d301      	bcc.n	8000e94 <SysTick_Config+0x14>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e011      	b.n	8000eb8 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000e94:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <SysTick_Config+0x40>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea6:	f7ff ffc1 	bl	8000e2c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <SysTick_Config+0x40>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <SysTick_Config+0x40>)
 8000eb2:	2207      	movs	r2, #7
 8000eb4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	e000e010 	.word	0xe000e010

08000ec4 <main>:

  */

int main(void)

{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

  //uint8_t ctrl = 0;

  STM_EVAL_LEDInit(LED3);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff fd4c 	bl	8000968 <STM_EVAL_LEDInit>

  STM_EVAL_LEDInit(LED4);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff fd49 	bl	8000968 <STM_EVAL_LEDInit>

  STM_EVAL_LEDInit(LED5);
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f7ff fd46 	bl	8000968 <STM_EVAL_LEDInit>

  STM_EVAL_LEDInit(LED6);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f7ff fd43 	bl	8000968 <STM_EVAL_LEDInit>



  /* Set configuration of LIS302DL*/

  LIS302DL_InitStruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 8000ee2:	2340      	movs	r3, #64	; 0x40
 8000ee4:	703b      	strb	r3, [r7, #0]

  LIS302DL_InitStruct.Output_DataRate = LIS302DL_DATARATE_400;
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	707b      	strb	r3, [r7, #1]

  LIS302DL_InitStruct.Axes_Enable = LIS302DL_X_ENABLE | LIS302DL_Y_ENABLE | LIS302DL_Z_ENABLE;
 8000eea:	2307      	movs	r3, #7
 8000eec:	70bb      	strb	r3, [r7, #2]

  LIS302DL_InitStruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	70fb      	strb	r3, [r7, #3]

  LIS302DL_InitStruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	713b      	strb	r3, [r7, #4]

  LIS302DL_Init(&LIS302DL_InitStruct);
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fe11 	bl	8000b20 <LIS302DL_Init>

  /* SysTick end of count event each 100ms */

  SysTick_Config(SystemCoreClock/1000);
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <main+0x74>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <main+0x78>)
 8000f04:	fba2 2303 	umull	r2, r3, r2, r3
 8000f08:	099b      	lsrs	r3, r3, #6
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ffb8 	bl	8000e80 <SysTick_Config>

  /* Required delay for the MEMS Accelerometre: Turn-on time = 3/Output data Rate 

                                                             = 3/100 = 30ms */

  Delay(30);
 8000f10:	201e      	movs	r0, #30
 8000f12:	f000 f81b 	bl	8000f4c <Delay>

  



  LIS302DL_Read(Buffer, LIS302DL_OUT_X_ADDR, 6);
 8000f16:	2206      	movs	r2, #6
 8000f18:	2129      	movs	r1, #41	; 0x29
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <main+0x7c>)
 8000f1c:	f7ff fe56 	bl	8000bcc <LIS302DL_Read>

                  

  XOffset = Buffer[0];
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <main+0x7c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b25a      	sxtb	r2, r3
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <main+0x80>)
 8000f28:	701a      	strb	r2, [r3, #0]

  YOffset = Buffer[2];
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <main+0x7c>)
 8000f2c:	789b      	ldrb	r3, [r3, #2]
 8000f2e:	b25a      	sxtb	r2, r3
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <main+0x84>)
 8000f32:	701a      	strb	r2, [r3, #0]



  while(1)
 8000f34:	e7fe      	b.n	8000f34 <main+0x70>
 8000f36:	bf00      	nop
 8000f38:	20000024 	.word	0x20000024
 8000f3c:	10624dd3 	.word	0x10624dd3
 8000f40:	200000d8 	.word	0x200000d8
 8000f44:	200000d4 	.word	0x200000d4
 8000f48:	200000de 	.word	0x200000de

08000f4c <Delay>:

  */

void Delay(__IO uint32_t nTime)

{ 
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  TimingDelay = nTime;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <Delay+0x24>)
 8000f58:	6013      	str	r3, [r2, #0]



  while(TimingDelay != 0);
 8000f5a:	bf00      	nop
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <Delay+0x24>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1fb      	bne.n	8000f5c <Delay+0x10>

}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	20000044 	.word	0x20000044

08000f74 <TimingDelay_Decrement>:

  */

void TimingDelay_Decrement(void)

{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  if (TimingDelay != 0x00)
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <TimingDelay_Decrement+0x20>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d004      	beq.n	8000f8a <TimingDelay_Decrement+0x16>

  { 

    TimingDelay--;
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <TimingDelay_Decrement+0x20>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	4a03      	ldr	r2, [pc, #12]	; (8000f94 <TimingDelay_Decrement+0x20>)
 8000f88:	6013      	str	r3, [r2, #0]

  }

}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	20000044 	.word	0x20000044

08000f98 <LIS302DL_TIMEOUT_UserCallback>:

  */

uint32_t LIS302DL_TIMEOUT_UserCallback(void)

{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* MEMS Accelerometer Timeout error occured */

  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <LIS302DL_TIMEOUT_UserCallback+0x4>
	...

08000fa0 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fa2:	e003      	b.n	8000fac <LoopCopyDataInit>

08000fa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000fa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000faa:	3104      	adds	r1, #4

08000fac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fac:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000fb0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fb2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fb4:	d3f6      	bcc.n	8000fa4 <CopyDataInit>
  ldr  r2, =_sbss
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000fb8:	e002      	b.n	8000fc0 <LoopFillZerobss>

08000fba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fbc:	f842 3b04 	str.w	r3, [r2], #4

08000fc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000fc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fc4:	d3f9      	bcc.n	8000fba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fc6:	f000 f921 	bl	800120c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fca:	f000 f9d1 	bl	8001370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fce:	f7ff ff79 	bl	8000ec4 <main>
  bx  lr    
 8000fd2:	4770      	bx	lr
  ldr  r3, =_sidata
 8000fd4:	080013f0 	.word	0x080013f0
  ldr  r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fdc:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 8000fe0:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 8000fe4:	200000e0 	.word	0x200000e0

08000fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC_IRQHandler>

08000fea <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <HardFault_Handler+0x4>

08000ffe <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001002:	e7fe      	b.n	8001002 <MemManage_Handler+0x4>

08001004 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001008:	e7fe      	b.n	8001008 <BusFault_Handler+0x4>

0800100a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800100e:	e7fe      	b.n	800100e <UsageFault_Handler+0x4>

08001010 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
  uint8_t temp1, temp2 = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	71fb      	strb	r3, [r7, #7]
  
  if (TimingDelay != 0x00)
 8001046:	4b69      	ldr	r3, [pc, #420]	; (80011ec <SysTick_Handler+0x1b0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d002      	beq.n	8001054 <SysTick_Handler+0x18>
  {
    TimingDelay_Decrement();
 800104e:	f7ff ff91 	bl	8000f74 <TimingDelay_Decrement>
        }
      }
      Counter = 0x00;
    }
  }  
}
 8001052:	e0c6      	b.n	80011e2 <SysTick_Handler+0x1a6>
    Counter ++;
 8001054:	4b66      	ldr	r3, [pc, #408]	; (80011f0 <SysTick_Handler+0x1b4>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b64      	ldr	r3, [pc, #400]	; (80011f0 <SysTick_Handler+0x1b4>)
 800105e:	701a      	strb	r2, [r3, #0]
    if (Counter == 10)
 8001060:	4b63      	ldr	r3, [pc, #396]	; (80011f0 <SysTick_Handler+0x1b4>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b0a      	cmp	r3, #10
 8001066:	f040 80bc 	bne.w	80011e2 <SysTick_Handler+0x1a6>
      Buffer[0] = 0;
 800106a:	4b62      	ldr	r3, [pc, #392]	; (80011f4 <SysTick_Handler+0x1b8>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
      Buffer[2] = 0;
 8001070:	4b60      	ldr	r3, [pc, #384]	; (80011f4 <SysTick_Handler+0x1b8>)
 8001072:	2200      	movs	r2, #0
 8001074:	709a      	strb	r2, [r3, #2]
      TIM_CCxCmd(TIM4, TIM_Channel_1, DISABLE);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	485f      	ldr	r0, [pc, #380]	; (80011f8 <SysTick_Handler+0x1bc>)
 800107c:	f7ff fc48 	bl	8000910 <TIM_CCxCmd>
      TIM_CCxCmd(TIM4, TIM_Channel_2, DISABLE);
 8001080:	2200      	movs	r2, #0
 8001082:	2104      	movs	r1, #4
 8001084:	485c      	ldr	r0, [pc, #368]	; (80011f8 <SysTick_Handler+0x1bc>)
 8001086:	f7ff fc43 	bl	8000910 <TIM_CCxCmd>
      TIM_CCxCmd(TIM4, TIM_Channel_3, DISABLE);
 800108a:	2200      	movs	r2, #0
 800108c:	2108      	movs	r1, #8
 800108e:	485a      	ldr	r0, [pc, #360]	; (80011f8 <SysTick_Handler+0x1bc>)
 8001090:	f7ff fc3e 	bl	8000910 <TIM_CCxCmd>
      TIM_CCxCmd(TIM4, TIM_Channel_4, DISABLE);
 8001094:	2200      	movs	r2, #0
 8001096:	210c      	movs	r1, #12
 8001098:	4857      	ldr	r0, [pc, #348]	; (80011f8 <SysTick_Handler+0x1bc>)
 800109a:	f7ff fc39 	bl	8000910 <TIM_CCxCmd>
      LIS302DL_Read(Buffer, LIS302DL_OUT_X_ADDR, 6);
 800109e:	2206      	movs	r2, #6
 80010a0:	2129      	movs	r1, #41	; 0x29
 80010a2:	4854      	ldr	r0, [pc, #336]	; (80011f4 <SysTick_Handler+0x1b8>)
 80010a4:	f7ff fd92 	bl	8000bcc <LIS302DL_Read>
      Buffer[0] -= XOffset;
 80010a8:	4b54      	ldr	r3, [pc, #336]	; (80011fc <SysTick_Handler+0x1c0>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b259      	sxtb	r1, r3
 80010ae:	4b51      	ldr	r3, [pc, #324]	; (80011f4 <SysTick_Handler+0x1b8>)
 80010b0:	781a      	ldrb	r2, [r3, #0]
 80010b2:	b2cb      	uxtb	r3, r1
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <SysTick_Handler+0x1b8>)
 80010ba:	701a      	strb	r2, [r3, #0]
      Buffer[2] -= YOffset;
 80010bc:	4b50      	ldr	r3, [pc, #320]	; (8001200 <SysTick_Handler+0x1c4>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b259      	sxtb	r1, r3
 80010c2:	4b4c      	ldr	r3, [pc, #304]	; (80011f4 <SysTick_Handler+0x1b8>)
 80010c4:	789a      	ldrb	r2, [r3, #2]
 80010c6:	b2cb      	uxtb	r3, r1
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <SysTick_Handler+0x1b8>)
 80010ce:	709a      	strb	r2, [r3, #2]
      temp1 = ABS((int8_t)(Buffer[0]));
 80010d0:	4b48      	ldr	r3, [pc, #288]	; (80011f4 <SysTick_Handler+0x1b8>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	bfb8      	it	lt
 80010da:	425b      	neglt	r3, r3
 80010dc:	71bb      	strb	r3, [r7, #6]
      temp2 = ABS((int8_t)(Buffer[2]));       
 80010de:	4b45      	ldr	r3, [pc, #276]	; (80011f4 <SysTick_Handler+0x1b8>)
 80010e0:	789b      	ldrb	r3, [r3, #2]
 80010e2:	b25b      	sxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	bfb8      	it	lt
 80010e8:	425b      	neglt	r3, r3
 80010ea:	71fb      	strb	r3, [r7, #7]
      TempAcceleration = MAX(temp1, temp2);
 80010ec:	79ba      	ldrb	r2, [r7, #6]
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	4293      	cmp	r3, r2
 80010f2:	bf38      	it	cc
 80010f4:	4613      	movcc	r3, r2
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	4b42      	ldr	r3, [pc, #264]	; (8001204 <SysTick_Handler+0x1c8>)
 80010fa:	701a      	strb	r2, [r3, #0]
      if(TempAcceleration != 0)
 80010fc:	4b41      	ldr	r3, [pc, #260]	; (8001204 <SysTick_Handler+0x1c8>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d06a      	beq.n	80011dc <SysTick_Handler+0x1a0>
        if ((int8_t)Buffer[0] < -2)
 8001106:	4b3b      	ldr	r3, [pc, #236]	; (80011f4 <SysTick_Handler+0x1b8>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b25b      	sxtb	r3, r3
 800110c:	f113 0f02 	cmn.w	r3, #2
 8001110:	da10      	bge.n	8001134 <SysTick_Handler+0xf8>
          TIM_CCxCmd(TIM4, TIM_Channel_4, ENABLE);
 8001112:	2201      	movs	r2, #1
 8001114:	210c      	movs	r1, #12
 8001116:	4838      	ldr	r0, [pc, #224]	; (80011f8 <SysTick_Handler+0x1bc>)
 8001118:	f7ff fbfa 	bl	8000910 <TIM_CCxCmd>
          TIM_SetCompare4(TIM4, TIM_CCR/TempAcceleration);
 800111c:	4b39      	ldr	r3, [pc, #228]	; (8001204 <SysTick_Handler+0x1c8>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	461a      	mov	r2, r3
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	fb93 f3f2 	sdiv	r3, r3, r2
 800112c:	4619      	mov	r1, r3
 800112e:	4832      	ldr	r0, [pc, #200]	; (80011f8 <SysTick_Handler+0x1bc>)
 8001130:	f7ff fbe0 	bl	80008f4 <TIM_SetCompare4>
        if ((int8_t)Buffer[0] > 2)
 8001134:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <SysTick_Handler+0x1b8>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b25b      	sxtb	r3, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	dd10      	ble.n	8001160 <SysTick_Handler+0x124>
          TIM_CCxCmd(TIM4, TIM_Channel_2, ENABLE);
 800113e:	2201      	movs	r2, #1
 8001140:	2104      	movs	r1, #4
 8001142:	482d      	ldr	r0, [pc, #180]	; (80011f8 <SysTick_Handler+0x1bc>)
 8001144:	f7ff fbe4 	bl	8000910 <TIM_CCxCmd>
          TIM_SetCompare2(TIM4, TIM_CCR/TempAcceleration);
 8001148:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <SysTick_Handler+0x1c8>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001154:	fb93 f3f2 	sdiv	r3, r3, r2
 8001158:	4619      	mov	r1, r3
 800115a:	4827      	ldr	r0, [pc, #156]	; (80011f8 <SysTick_Handler+0x1bc>)
 800115c:	f7ff fbae 	bl	80008bc <TIM_SetCompare2>
        if ((int8_t)Buffer[2] > 2)
 8001160:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <SysTick_Handler+0x1b8>)
 8001162:	789b      	ldrb	r3, [r3, #2]
 8001164:	b25b      	sxtb	r3, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	dd10      	ble.n	800118c <SysTick_Handler+0x150>
          TIM_CCxCmd(TIM4, TIM_Channel_1, ENABLE);
 800116a:	2201      	movs	r2, #1
 800116c:	2100      	movs	r1, #0
 800116e:	4822      	ldr	r0, [pc, #136]	; (80011f8 <SysTick_Handler+0x1bc>)
 8001170:	f7ff fbce 	bl	8000910 <TIM_CCxCmd>
          TIM_SetCompare1(TIM4, TIM_CCR/TempAcceleration);
 8001174:	4b23      	ldr	r3, [pc, #140]	; (8001204 <SysTick_Handler+0x1c8>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	461a      	mov	r2, r3
 800117c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001180:	fb93 f3f2 	sdiv	r3, r3, r2
 8001184:	4619      	mov	r1, r3
 8001186:	481c      	ldr	r0, [pc, #112]	; (80011f8 <SysTick_Handler+0x1bc>)
 8001188:	f7ff fb8a 	bl	80008a0 <TIM_SetCompare1>
        if ((int8_t)Buffer[2] < -2)
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <SysTick_Handler+0x1b8>)
 800118e:	789b      	ldrb	r3, [r3, #2]
 8001190:	b25b      	sxtb	r3, r3
 8001192:	f113 0f02 	cmn.w	r3, #2
 8001196:	da10      	bge.n	80011ba <SysTick_Handler+0x17e>
          TIM_CCxCmd(TIM4, TIM_Channel_3, ENABLE);
 8001198:	2201      	movs	r2, #1
 800119a:	2108      	movs	r1, #8
 800119c:	4816      	ldr	r0, [pc, #88]	; (80011f8 <SysTick_Handler+0x1bc>)
 800119e:	f7ff fbb7 	bl	8000910 <TIM_CCxCmd>
          TIM_SetCompare3(TIM4, TIM_CCR/TempAcceleration);
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <SysTick_Handler+0x1c8>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	4810      	ldr	r0, [pc, #64]	; (80011f8 <SysTick_Handler+0x1bc>)
 80011b6:	f7ff fb8f 	bl	80008d8 <TIM_SetCompare3>
        TIM_SetAutoreload(TIM4,  TIM_ARR/TempAcceleration);
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <SysTick_Handler+0x1c8>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	f240 736c 	movw	r3, #1900	; 0x76c
 80011c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	480a      	ldr	r0, [pc, #40]	; (80011f8 <SysTick_Handler+0x1bc>)
 80011ce:	f7ff fb59 	bl	8000884 <TIM_SetAutoreload>
        LIS302DL_Read(&ClickReg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 80011d2:	2201      	movs	r2, #1
 80011d4:	2139      	movs	r1, #57	; 0x39
 80011d6:	480c      	ldr	r0, [pc, #48]	; (8001208 <SysTick_Handler+0x1cc>)
 80011d8:	f7ff fcf8 	bl	8000bcc <LIS302DL_Read>
      Counter = 0x00;
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SysTick_Handler+0x1b4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000044 	.word	0x20000044
 80011f0:	20000048 	.word	0x20000048
 80011f4:	200000d8 	.word	0x200000d8
 80011f8:	40000800 	.word	0x40000800
 80011fc:	200000d4 	.word	0x200000d4
 8001200:	200000de 	.word	0x200000de
 8001204:	20000049 	.word	0x20000049
 8001208:	2000004a 	.word	0x2000004a

0800120c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001210:	4a16      	ldr	r2, [pc, #88]	; (800126c <SystemInit+0x60>)
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <SystemInit+0x60>)
 8001214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800121c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001220:	4a13      	ldr	r2, [pc, #76]	; (8001270 <SystemInit+0x64>)
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <SystemInit+0x64>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800122c:	4b10      	ldr	r3, [pc, #64]	; (8001270 <SystemInit+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001232:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <SystemInit+0x64>)
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <SystemInit+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800123c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001240:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <SystemInit+0x64>)
 8001244:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <SystemInit+0x68>)
 8001246:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001248:	4a09      	ldr	r2, [pc, #36]	; (8001270 <SystemInit+0x64>)
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <SystemInit+0x64>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001252:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <SystemInit+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800125a:	f000 f80d 	bl	8001278 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800125e:	4b03      	ldr	r3, [pc, #12]	; (800126c <SystemInit+0x60>)
 8001260:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001264:	609a      	str	r2, [r3, #8]
#endif
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00
 8001270:	40023800 	.word	0x40023800
 8001274:	24003010 	.word	0x24003010

08001278 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001286:	4a36      	ldr	r2, [pc, #216]	; (8001360 <SetSysClock+0xe8>)
 8001288:	4b35      	ldr	r3, [pc, #212]	; (8001360 <SetSysClock+0xe8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001292:	4b33      	ldr	r3, [pc, #204]	; (8001360 <SetSysClock+0xe8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3301      	adds	r3, #1
 80012a0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d103      	bne.n	80012b0 <SetSysClock+0x38>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80012ae:	d1f0      	bne.n	8001292 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80012b0:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <SetSysClock+0xe8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80012bc:	2301      	movs	r3, #1
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	e001      	b.n	80012c6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80012c2:	2300      	movs	r3, #0
 80012c4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d142      	bne.n	8001352 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80012cc:	4a24      	ldr	r2, [pc, #144]	; (8001360 <SetSysClock+0xe8>)
 80012ce:	4b24      	ldr	r3, [pc, #144]	; (8001360 <SetSysClock+0xe8>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80012d8:	4a22      	ldr	r2, [pc, #136]	; (8001364 <SetSysClock+0xec>)
 80012da:	4b22      	ldr	r3, [pc, #136]	; (8001364 <SetSysClock+0xec>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80012e4:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <SetSysClock+0xe8>)
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <SetSysClock+0xe8>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80012ec:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <SetSysClock+0xe8>)
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <SetSysClock+0xe8>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012f6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80012f8:	4a19      	ldr	r2, [pc, #100]	; (8001360 <SetSysClock+0xe8>)
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <SetSysClock+0xe8>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001302:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <SetSysClock+0xe8>)
 8001306:	4a18      	ldr	r2, [pc, #96]	; (8001368 <SetSysClock+0xf0>)
 8001308:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800130a:	4a15      	ldr	r2, [pc, #84]	; (8001360 <SetSysClock+0xe8>)
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <SetSysClock+0xe8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001314:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001316:	bf00      	nop
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <SetSysClock+0xe8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f9      	beq.n	8001318 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <SetSysClock+0xf4>)
 8001326:	f240 6205 	movw	r2, #1541	; 0x605
 800132a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <SetSysClock+0xe8>)
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <SetSysClock+0xe8>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f023 0303 	bic.w	r3, r3, #3
 8001336:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001338:	4a09      	ldr	r2, [pc, #36]	; (8001360 <SetSysClock+0xe8>)
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <SetSysClock+0xe8>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f043 0302 	orr.w	r3, r3, #2
 8001342:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001344:	bf00      	nop
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <SetSysClock+0xe8>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b08      	cmp	r3, #8
 8001350:	d1f9      	bne.n	8001346 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40007000 	.word	0x40007000
 8001368:	07405408 	.word	0x07405408
 800136c:	40023c00 	.word	0x40023c00

08001370 <__libc_init_array>:
 8001370:	b570      	push	{r4, r5, r6, lr}
 8001372:	4e0d      	ldr	r6, [pc, #52]	; (80013a8 <__libc_init_array+0x38>)
 8001374:	4c0d      	ldr	r4, [pc, #52]	; (80013ac <__libc_init_array+0x3c>)
 8001376:	1ba4      	subs	r4, r4, r6
 8001378:	10a4      	asrs	r4, r4, #2
 800137a:	2500      	movs	r5, #0
 800137c:	42a5      	cmp	r5, r4
 800137e:	d109      	bne.n	8001394 <__libc_init_array+0x24>
 8001380:	4e0b      	ldr	r6, [pc, #44]	; (80013b0 <__libc_init_array+0x40>)
 8001382:	4c0c      	ldr	r4, [pc, #48]	; (80013b4 <__libc_init_array+0x44>)
 8001384:	f000 f824 	bl	80013d0 <_init>
 8001388:	1ba4      	subs	r4, r4, r6
 800138a:	10a4      	asrs	r4, r4, #2
 800138c:	2500      	movs	r5, #0
 800138e:	42a5      	cmp	r5, r4
 8001390:	d105      	bne.n	800139e <__libc_init_array+0x2e>
 8001392:	bd70      	pop	{r4, r5, r6, pc}
 8001394:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001398:	4798      	blx	r3
 800139a:	3501      	adds	r5, #1
 800139c:	e7ee      	b.n	800137c <__libc_init_array+0xc>
 800139e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013a2:	4798      	blx	r3
 80013a4:	3501      	adds	r5, #1
 80013a6:	e7f2      	b.n	800138e <__libc_init_array+0x1e>
 80013a8:	080013e8 	.word	0x080013e8
 80013ac:	080013e8 	.word	0x080013e8
 80013b0:	080013e8 	.word	0x080013e8
 80013b4:	080013ec 	.word	0x080013ec

080013b8 <GPIO_PIN>:
 80013b8:	20001000 80004000                       ... .@..

080013c0 <GPIO_CLK>:
 80013c0:	00000008 00000008 00000008 00000008     ................

080013d0 <_init>:
 80013d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d2:	bf00      	nop
 80013d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013d6:	bc08      	pop	{r3}
 80013d8:	469e      	mov	lr, r3
 80013da:	4770      	bx	lr

080013dc <_fini>:
 80013dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013de:	bf00      	nop
 80013e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013e2:	bc08      	pop	{r3}
 80013e4:	469e      	mov	lr, r3
 80013e6:	4770      	bx	lr
